name: 使用 Express 开发项目系列-02-路由、模板引擎指北
topics:
  - Express
  - JavaScript
  - Nodejs
id: c9136e583956eb18c610c7152c2fcfd7
steps:
  - name: 使用模板引擎
    commit: a2a0e26
    diff:
      - file: package.json
        display: true
        explain:
          pre: >-
            ## 模板引擎


            首先，访问
            [Github](https://github.com/pftom/express-tutorial-02)，将初始代码下载下来，并使用你钟爱的编辑器打开。


            然后打开终端，进入到我们的项目目录之下，输入如下命令：


            ```shell

            npm install pug

            ```


            执行完之后的 `package.json` 如下：
          post: >-
            我们通过上面的命令安装了一个名为 [pug](https://pugjs.org/api/getting-started.html)
            的模板引擎。现在我们先来看看一个简单的 pug 模板是怎么样的。
      - file: views/index.pug
        display: true
        explain:
          pre: 在项目根目录之下创建 `views` 文件夹，并在这个文件夹之下新建一个 `index.pug` 文件，在其中输入如下的内容：
          post: >-
            可以看到，一个 pug 模板引擎其实就是一个模板文件，它接收一些填充数据，然后它会生成相应的填充了数据的 HTML 文件。


            我们通过 Node 的 [REPL](http://www.runoob.com/nodejs/nodejs-repl.html)
            来进一步来真实的演示一下模板引擎的输出内容。我们打开终端，进入项目根目录，输入 `node` 进入 REPL 环境。


            测验如下：


            ![](tuture-assets/2af4a695298fa05c74deacf448734efb)


            可以看到，pug 使用缩进来表示 HTML 元素的层级，通过 `#{variable}`
            来在模板引擎中使用变量，这里我们的想展示的变量为 `info` ，它的值为 `"Node"` 。
      - file: index.js
        display: true
        explain:
          pre: >-
            接下来，我们看一下如何将 pug 模板整合到我们的 Express 应用中。打开 `index.js`
            ，设置我们模板引擎使用的一些必要参数如下：
          post: >-
            我们打开终端，在项目根目录下运行 `node index.js` 命令，打开浏览器访问 `http://localhost:3000`
            查看结果如下：


            ![](tuture-assets/d558164c41b07bcac5da057e9b518992)


            可以看到，我们新增了四行代码，下面让我们来解释一下他们各自的作用：


            在第 1 行中，我们使用 `require` 导出了一个 Node 内置模块 `path`，它内置了一些关于路径操作的函数，
            `path.join` 是用来将一系列路径连起来组成一个路径的操作。


            在第 6 行中，我们通过设置 `views` 属性告诉 Express 我们的模板引擎文件存放的路径。


            `__dirname` 表示执行文件的所在目录路径。比如我们需要执行如下文件：`node index.js`，那么
            `__dirname` 就是 `index.js` 所在目录的路径。所以 `path.join(__dirname,
            'views'))` 表示执行文件所在目录下的 `views` 文件夹的路径。


            我们通过 `app.set('views', path.join(__dirname, 'views'))` 告诉
            Express，我们的模板引擎存放的路径时当前执行文件所在目录下的 `views` 路径。


            在第 7 行中，我们通过设置 `view engine` 这一属性来告诉 Express 我们在这个项目中会使用 `pug`
            这个模板引擎。因为我们前面安装了 `pug` ，因此可以在这里申明我们将使用它。


            在第 9 行中，我们将原来直接发送字符串的 `res.send("Hello Node")` 改为
            `res.render("index")`，因为我们在第 6 行代码设置了模板引擎存放的路径为 `views`，因此
            `res.render("index")` 会去项目根目录下寻找 `views` 文件夹，然后渲染 `views/index.pug`
            发送给访问者。


            最后浏览器会收到下面的内容并渲染：


            ![](tuture-assets/9d29ad833b7749f024a07fe9b2dc7156)
      - file: package-lock.json
    explain:
      pre: |-
        本篇教程是 “使用 Express 开发项目系列-02-路由、模板引擎指北”。

        在这篇教程中，你将完成如下目标：

         - 使用模板引擎代替之前直接返回的字符串

         - 使用路由来处理不同的访问链接

        最后我们将得到如下的结果：

        ![](tuture-assets/04ac4219db34dbe3883c2969e6483222)

        当你点击任意链接时，都会跳转到相应的页面，比如点击 "文档"：

        ![](tuture-assets/fde9c5a8323946fb4343b277a2ee4f9f)

        接下来就让我们一步一步的揭开这些疑问，完成我们的目标吧！
      post: >-
        > 将[本项目](https://github.com/pftom/express-tutorial-02) Clone 到本地，`git
        checkout -b step-01` 切换到 `step-01` 分支可以查看目前的完整代码。
  - name: 构建项目基础页面
    commit: 366cecf
    diff:
      - file: views/header.pug
        display: true
        explain:
          pre: |-
            项目包含三个页面：explore，docs，discussion，他们拥有共同的头部导航，用于跳转到各个页面。

            现在让我们先创建共有的头部导航页，命名为 `header.pug`，添加如下的内容：
          post: |-
            可以看到，我们添加了一个无序列表，在其中添加了三个链接分别指向三个不同的页面。

            在第 12 行，我们看到了点陌生的东西：`block content`，你可能会感觉到有点迷糊，但是别着急，我们马上就会讲到它。
      - file: views/explore.pug
        display: true
        explain:
          pre: 接着，我们来创建展示 explore 页的模板，加入内容如下：
          post: >-
            我们发现，这个模板里面又出现了一个新东西：`extends header.pug` ，而且又出现了我们熟悉的 `block
            content` ，现在我们可以来讲一讲这是什么意思了。


            `block content` 相当于一个占位符，也就是 `header.pug` 作为父模板，`explore.pug`
            去继承它，然后 `explore.pug` 相同 `block content` 下的内容就会替换 `header.pug` 相应的
            `block content`。


            在这里 `explore.pug` 最终的结果会是这样的：


            ```pug

            html
              head
                title Cool website
              body
                ul
                  li
                    a(href="/explore") 探索
                  li
                    a(href="/docs") 文档
                  li
                    a(href="discussion") 讨论区
                div 探索
            ```
      - file: index.js
        display: true
        explain:
          pre: 我们打开 `index.js` 文件，将第 4 行渲染 `index.pug` 改为渲染 `explore.pug` 如下：
          post: |-
            接着，我们在终端运行 `node index.js` 来开启我们的项目，打开浏览器查看结果如下：

            ![](tuture-assets/5a42fb387ccc908ed9f7b5aad8ecbf23)

            现在我们已经成功添加了基础页面的第一个页面：explore。现在让我们加把劲，把剩下的页面完成。
      - file: views/discussion.pug
        display: true
        explain:
          pre: 我们打开项目，在 `views` 目录下创建 `discussion.pug`  和 `docs.pug` 文件，输入内容如下：
      - file: views/docs.pug
        display: true
        explain:
          post: 可以看到，这两个模板的内容和我们在 `explore.pug` 里面填充的内容格式是一样的，只是最后要展示的内容不太一样。
      - file: views/index.pug
        display: false
    explain:
      pre: 通过上一步骤的讲解，我们了解了模板引擎是干什么的，以及如何使用。现在我们来进一步发挥模板引擎的潜能，搭建我们项目的基础页面页面。
      post: >-
        > 将[本项目](https://github.com/pftom/express-tutorial-02) Clone 到本地，`git
        checkout -b step-02` 切换到 `step-02` 分支可以查看目前的完整代码。
  - name: 配置多页面的路由
    commit: 9c69ab3
    diff:
      - file: index.js
        display: true
        explain:
          pre: >-
            我们先来看一看，如果没有配置路由，点击我们的头部链接会是什么效果，我们点击 "文档" 这一链接，会得到如下的效果：


            ![](tuture-assets/b52008dac5369e460e9207c198b82782)


            这是因为当点击时，浏览器会使用相应 a 标签的 `href` 的链接，然后跳转到这个链接的页面，然后会向
            `http://localhost:3000` 的服务器请求 `/docs`
            这个路径，但因为我们的服务器端没有处理这个路径的路由，所以会返回 "Cannot GET /docs" 的提示。


            好的，既然知道了原因，那么让我们马上来配置路由解决这个问题！打开 `index.js` 修改代码如下：
          post: >-
            修改保存后，我们打开终端，运行 `node index.js` 开启我们的项目，打开浏览器，点击 "文档" 这一链接，看到结果如下：


            ![](tuture-assets/b295f057c80b6b3545647d8916cb1d18)


            可以看到，我们成功访问了链接，并且浏览器显示了我们在 `docs.pug` 里面存放的内容。


            现在让我们来解释一下上面代码的意思：


            在第 5 行中，我们将 `"/"` 改为了 `"/explore"`，为了对应我们链接的字面意思。


            然后我们新添了两个路由：`"/docs"` 和 `"/discussion"`
            ，并且在他们的处理函数中渲染了相应的模板引擎返回给浏览器，这样，当访问相应的 `"/docs"` 或 `"/discussion"`
            接口时会会看到 `docs.pug`  或 `discussion.pug` 的相应内容。
    explain:
      pre: >-
        在上一小节中，我们创建了多个页面，而且它们全部共用一个头部，这样我们就不用为每一个页面都写一个具有相同代码的头部，这样更符合软件工程的复用性的思想。


        有好奇心的读者可能很快就会想到我们接下来要讲什么了！对的，我们想啊，现在有了三个页面，又有了共用的头部链接，那么我们下一步应该就是要通过头部链接来导航到不同的页面，这就涉及到多页面路由配置学习了。
      post: >-
        ## 总结


        在这一小节中，我们讲解了模板引擎是什么，并且用模板引擎替换了我们前面的字符串，并且发挥模板引擎的优势创建了多个页面。接着，我们配置了多个页面的路由，以通过共同的头部链接来实现多个页面之间的跳转。



        在下一小节中，我们将使用 Express 去完成更加复杂的应用，这势必就会涉及到 Express
        最核心的概念：中间件，我们将在讲解中间件的同时完成以下三个目标：


        - 使用社区的第三方模块作为中间件使用


        - 自己手写中间件


        - 错误处理


        好的，我们下篇教程再会！
